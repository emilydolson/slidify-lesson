plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"))
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(30, 70, 120, 180))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "0", "45", "90", "135"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(30, 70, 120, 170))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "30", "70", "120", "170"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(22, 67, 112, 157))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "22", "67", "112", "157"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(22, 67, 112, 157))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "22", "67", "112", "157"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(0, 0, 112, 157))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "22", "67", "112", "157"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(1, 1, 112, 157))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "22", "67", "112", "157"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(10, 10, 112, 157))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "22", "67", "112", "157"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(20, 20, 112, 157))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "22", "67", "112", "157"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(20, 21, 112, 157))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "22", "67", "112", "157"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(20, 21, 112, 157))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "22", "67", "112", "157"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(20, 21, 112, 100))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "22", "67", "112", "157"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(30, 70, 120, 170))
par(mfrow=c(1,1))
plot(vario.DBH.resid.newdirections, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "22", "67", "112", "157"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(30, 70, 120, 170))
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(0, 45, 90, 135))
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(30, 70, 120, 170))
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(0, 45, 90, 135))
vario.DBH.resid <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)))
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(0, 45, 90, 135))
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(0, pi/4, pi/2, 3*pi/4))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "30", "70", "120", "170"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(pi/8, 3*pi/8, 5*pi/8, 7*pi/8))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "30", "70", "120", "170"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(pi/8, 3*pi/8, 5*pi/8, 7*pi/8))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
legend("bottomright", c("omnid", "22.5", "67.5", "112.5", "177.5"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
plot(vario.DBH)
fit.DBH <-variofit(vario.DBH, ini.cov.pars=c(600, 200/-log(0.05)), ##sigma^2 and 1/phi
cov.model="exponential", minimisation.function="nls", weights="equal")
lm.DBH <- lm(DBH~Species, data=WEF.dat)
summary(lm.DBH)
DBH.resid <- resid(lm.DBH)
vario.DBH.resid <- variog(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)))
fit.DBH.resid <-variofit(vario.DBH.resid, ini.cov.pars=c(300, 200/-log(0.05)),
cov.model="exponential", minimisation.function="nls", weights="equal")
par(mfrow=c(1,2))
plot(vario.DBH, ylim=c(200,1200), main="DBH")
lines(fit.DBH)
abline(h=fit.DBH$nugget, col="blue")##nugget
abline(h=fit.DBH$cov.pars[1]+fit.DBH$nugget, col="green")##sill
abline(v=-log(0.05)*fit.DBH$cov.pars[2], col="red3")##effective range
plot(vario.DBH.resid, ylim=c(200,500), main="DBH residuals")
lines(fit.DBH.resid)
abline(h=fit.DBH.resid$nugget, col="blue")
abline(h=fit.DBH.resid$cov.pars[1]+fit.DBH.resid$nugget, col="green")
abline(v=-log(0.05)*fit.DBH.resid$cov.pars[2], col="red3")
Concatenated.Conservation.Data.Round.Two <- read.csv("~/Concatenated.Conservation.Data.Round.Two.csv")
View(Concatenated.Conservation.Data.Round.Two)
summary(Concatenated.Conservation.Data.Round.Two)
summary(Concatenated.Conservation.Data.Round.Two$Patches)
summary(as.factor(Concatenated.Conservation.Data.Round.Two$Patches))
table(as.factor(Concatenated.Conservation.Data.Round.Two$Patches), Concatenated.Conservation.Data.Round.Two$Initial.Pop)
table(as.factor(Concatenated.Conservation.Data.Round.Two$Patches), Concatenated.Conservation.Data.Round.Two$Initial.Pop, Concatenated.Conservation.Data.Round.Two$Killed)
table(as.factor(Concatenated.Conservation.Data.Round.Two$Patches), Concatenated.Conservation.Data.Round.Two$Initial.Pop)
summary(as.factor(Concatenated.Conservation.Data.Round.Two$Patches))
Concatenated.Conservation.Data.Round.Two <- read.csv("~/Concatenated.Conservation.Data.Round.Two.csv")
summary(Concatenated.Conservation.Data.Round.Two$Patches)
summary(Concatenated.Conservation.Data.Round.Two)
summary(Concatenated.Conservation.Data.Round.Two$Patches)
summary(as.factor(Concatenated.Conservation.Data.Round.Two$Patches))
length(Concatenated.Conservation.Data.Round.Two)
nrows(Concatenated.Conservation.Data.Round.Two)
nrow(Concatenated.Conservation.Data.Round.Two)
vario.DBH.resid
library(spBayes)
library(MBA)
library(geoR)
library(fields)
library(rgl)
library(sp)
library(maptools)
library(rgdal)
library(classInt)
library(lattice)
# Load in the data; it's part of spBayes package
data(WEF.dat)
WEF.dat <- WEF.dat[!apply(WEF.dat[,c("East_m","North_m","DBH_cm","Tree_height_m","ELEV_m")], 1, function(x)any(is.na(x))),]
DBH <- WEF.dat$DBH_cm
HT <- WEF.dat$Tree_height_m
###################################################
### code chunk number 2: coords
###################################################
coords <- as.matrix(WEF.dat[,c("East_m","North_m")])
plot(coords, pch=1, cex=sqrt(DBH)/10, col="darkgreen", xlab="Easting (m)", ylab="Northing (m)")
leg.vals <- round(quantile(DBH),0)
legend("topleft", pch=1, legend=leg.vals, col="darkgreen", pt.cex=sqrt(leg.vals)/10, bty="n", title="DBH (cm)")
###################################################
### code chunk number 3: colorRamp
###################################################
col.br <- colorRampPalette(c("blue", "cyan", "yellow", "red"))
col.pal <- col.br(5)
###################################################
### code chunk number 4: classInt
###################################################
quant <- classIntervals(DBH, n=5, style="quantile")
fisher <- classIntervals(DBH, n=5, style="fisher")
kmeans <- classIntervals(DBH, n=5, style="kmeans")
hclust <- classIntervals(DBH, n=5, style="hclust")
###################################################
### code chunk number 5: quantFisher
###################################################
quant.col <- findColours(quant, col.pal)
fisher.col <- findColours(fisher, col.pal)
par(mfrow=c(1,2))
plot(coords, col=quant.col, pch=19, cex=0.5, main="Quantile", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(quant.col, "palette"),
legend=names(attr(quant.col, "table")), bty="n")
plot(coords, col=fisher.col, pch=19, cex=0.5, main="Bclust", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft",
fill=attr(fisher.col, "palette"),
legend=names(attr(fisher.col, "table")), bty="n")
###################################################
### code chunk number 6: DBHClasses
###################################################
fixed <- classIntervals(DBH, n=4, style="fixed", fixedBreaks=c(0,12.7,30.48,60,max(DBH)+1))
fixed.col <- findColours(fixed, col.pal)
plot(coords, col=fixed.col, pch=19, cex=0.5, main="Forestry tree size classes", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(fixed.col, "palette"), legend=c("sapling","poletimber","sawtimber","large sawtimber"), bty="n")
###################################################
### code chunk number 7: MBASurf
###################################################
x.res <- 100; y.res <- 100
surf <- mba.surf(cbind(coords, DBH), no.X=x.res, no.Y=y.res, h=5, m=2, extend=FALSE)$xyz.est
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
###################################################
### code chunk number 8: rglMBASurf (eval = FALSE)
###################################################
zlim <- range(surf[[3]], na.rm=TRUE)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- col.br(zlen) # DBH color lookup table
col <- colorlut[ surf[[3]]-zlim[1]+1 ] # assign colors to heights for each point
##
surface3d(surf[[1]], surf[[2]], surf[[3]], col=col)
axes3d(); title3d(main="DBH", xlab="Easting (m)", ylab="Northing (m)", zlab="DBH (cm)")
###################################################
### code chunk number 9: perspMBASurf
###################################################
drape.plot(surf[[1]], surf[[2]], surf[[3]], col=col.br(150), theta=225, phi=50, border=FALSE,
add.legend=FALSE, xlab="Easting (m)", ylab="Northing (m)", zlab="DBH (cm)")
image.plot(zlim=range(surf[[3]], na.rm=TRUE), legend.only=TRUE, horizontal=FALSE)
###################################################
### code chunk number 10: geoRVariog
###################################################
max.dist <- 0.25*max(iDist(coords))
bins <- 50
vario.DBH <- variog(coords=coords, data=DBH, uvec=(seq(0, max.dist, length=bins)))
# check it out
plot(vario.DBH)
fit.DBH <-variofit(vario.DBH, ini.cov.pars=c(600, 200/-log(0.05)), ##sigma^2 and 1/phi
cov.model="exponential", minimisation.function="nls", weights="equal")
lm.DBH <- lm(DBH~Species, data=WEF.dat)
summary(lm.DBH)
DBH.resid <- resid(lm.DBH)
vario.DBH.resid <- variog(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)))
fit.DBH.resid <-variofit(vario.DBH.resid, ini.cov.pars=c(300, 200/-log(0.05)),
cov.model="exponential", minimisation.function="nls", weights="equal")
par(mfrow=c(1,2))
plot(vario.DBH, ylim=c(200,1200), main="DBH")
lines(fit.DBH)
abline(h=fit.DBH$nugget, col="blue")##nugget
abline(h=fit.DBH$cov.pars[1]+fit.DBH$nugget, col="green")##sill
abline(v=-log(0.05)*fit.DBH$cov.pars[2], col="red3")##effective range
plot(vario.DBH.resid, ylim=c(200,500), main="DBH residuals")
lines(fit.DBH.resid)
abline(h=fit.DBH.resid$nugget, col="blue")
abline(h=fit.DBH.resid$cov.pars[1]+fit.DBH.resid$nugget, col="green")
abline(v=-log(0.05)*fit.DBH.resid$cov.pars[2], col="red3")
###################################################
### code chunk number 11: anisoVario
###################################################
vario.DBH.resid <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
# Example of how fit a variogram to one of the directional variograms
# created above: vario.DBH.resid
vario.DBH.resid.omni<-variofit(vario.DBH.resid$omnidirectional, ini.cov.pars=c(300, 200/-log(0.05)),
cov.model="exponential", minimisation.function="nls", weights="equal")
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), legend=FALSE)
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), legend=FALSE)
legend("bottomright", c("omnid", "0", "45", "90", "135", "directional"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red","black"), lty=1)
lines(vario.DBH.resid.omni)
plot(vario.DBH.resid.omni, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), legend=FALSE)
legend("bottomright", c("omnid", "0", "45", "90", "135", "directional"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red","black"), lty=1)
lines(vario.DBH.resid.omni)
vario.DBH.resid.omni
typeof(vario.DBH.resid.omni)
typeof(vario.DBH.resid)
vario.DBH.resid
WEF.dat
summary(WEF.dat)
vario.DBH.resid.omni<-variofit(vario.DBH.resid$0, ini.cov.pars=c(300, 200/-log(0.05)),
cov.model="exponential", minimisation.function="nls", weights="equal")
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), legend=FALSE)
legend("bottomright", c("omnid", "0", "45", "90", "135", "directional"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red","black"), lty=1)
lines(vario.DBH.resid.omni)
rm(list=ls())
#Close graphics devices
graphics.off()
## This lab follows the vignette available as part of
## Dr. Andrew Finley's course on analysis of spatial data
## Here is the link to the course: http://blue.for.msu.edu/GC14/
## See the code below, and the Annotated vignette: "FOR870_Lab5_spatialdataviz_variograms.pdf"
## For Package rgdal, if it does not load properly, refer to
## the instructions under "Pre Course Material": http://blue.for.msu.edu/GC14/
## For Package geoR, you may need to install (or re-install) XQuartz if you're on a Mac
## XQuartz: http://xquartz.macosforge.org/landing/
## Follow along with the vignette. The first parts
## give you some more functions for plotting spatial data,
## and are optional (though you will have to enter the code in order
## to get to the Variogram section).
## Code Chunk #10 & #11: "3. Variograms": this is where you need to work through the code.
###################################################
### code chunk number 1: libs
###################################################
## Load packages you'll need in this lab; install.package() if it's not installed already.
library(spBayes)
library(MBA)
library(geoR)
library(fields)
library(rgl)
library(sp)
library(maptools)
library(rgdal)
library(classInt)
library(lattice)
# Load in the data; it's part of spBayes package
data(WEF.dat)
WEF.dat <- WEF.dat[!apply(WEF.dat[,c("East_m","North_m","DBH_cm","Tree_height_m","ELEV_m")], 1, function(x)any(is.na(x))),]
DBH <- WEF.dat$DBH_cm
HT <- WEF.dat$Tree_height_m
###################################################
### code chunk number 2: coords
###################################################
coords <- as.matrix(WEF.dat[,c("East_m","North_m")])
plot(coords, pch=1, cex=sqrt(DBH)/10, col="darkgreen", xlab="Easting (m)", ylab="Northing (m)")
leg.vals <- round(quantile(DBH),0)
legend("topleft", pch=1, legend=leg.vals, col="darkgreen", pt.cex=sqrt(leg.vals)/10, bty="n", title="DBH (cm)")
###################################################
### code chunk number 3: colorRamp
###################################################
col.br <- colorRampPalette(c("blue", "cyan", "yellow", "red"))
col.pal <- col.br(5)
###################################################
### code chunk number 4: classInt
###################################################
quant <- classIntervals(DBH, n=5, style="quantile")
fisher <- classIntervals(DBH, n=5, style="fisher")
kmeans <- classIntervals(DBH, n=5, style="kmeans")
hclust <- classIntervals(DBH, n=5, style="hclust")
###################################################
### code chunk number 5: quantFisher
###################################################
quant.col <- findColours(quant, col.pal)
fisher.col <- findColours(fisher, col.pal)
par(mfrow=c(1,2))
plot(coords, col=quant.col, pch=19, cex=0.5, main="Quantile", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(quant.col, "palette"),
legend=names(attr(quant.col, "table")), bty="n")
plot(coords, col=fisher.col, pch=19, cex=0.5, main="Bclust", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft",
fill=attr(fisher.col, "palette"),
legend=names(attr(fisher.col, "table")), bty="n")
###################################################
### code chunk number 6: DBHClasses
###################################################
fixed <- classIntervals(DBH, n=4, style="fixed", fixedBreaks=c(0,12.7,30.48,60,max(DBH)+1))
fixed.col <- findColours(fixed, col.pal)
plot(coords, col=fixed.col, pch=19, cex=0.5, main="Forestry tree size classes", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(fixed.col, "palette"), legend=c("sapling","poletimber","sawtimber","large sawtimber"), bty="n")
###################################################
### code chunk number 7: MBASurf
###################################################
x.res <- 100; y.res <- 100
surf <- mba.surf(cbind(coords, DBH), no.X=x.res, no.Y=y.res, h=5, m=2, extend=FALSE)$xyz.est
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
###################################################
### code chunk number 8: rglMBASurf (eval = FALSE)
###################################################
zlim <- range(surf[[3]], na.rm=TRUE)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- col.br(zlen) # DBH color lookup table
col <- colorlut[ surf[[3]]-zlim[1]+1 ] # assign colors to heights for each point
##
surface3d(surf[[1]], surf[[2]], surf[[3]], col=col)
axes3d(); title3d(main="DBH", xlab="Easting (m)", ylab="Northing (m)", zlab="DBH (cm)")
###################################################
### code chunk number 9: perspMBASurf
###################################################
drape.plot(surf[[1]], surf[[2]], surf[[3]], col=col.br(150), theta=225, phi=50, border=FALSE,
add.legend=FALSE, xlab="Easting (m)", ylab="Northing (m)", zlab="DBH (cm)")
image.plot(zlim=range(surf[[3]], na.rm=TRUE), legend.only=TRUE, horizontal=FALSE)
###################################################
### code chunk number 10: geoRVariog
###################################################
max.dist <- 0.25*max(iDist(coords))
bins <- 50
vario.DBH <- variog(coords=coords, data=DBH, uvec=(seq(0, max.dist, length=bins)))
# check it out
plot(vario.DBH)
fit.DBH <-variofit(vario.DBH, ini.cov.pars=c(600, 200/-log(0.05)), ##sigma^2 and 1/phi
cov.model="exponential", minimisation.function="nls", weights="equal")
lm.DBH <- lm(DBH~Species, data=WEF.dat)
summary(lm.DBH)
DBH.resid <- resid(lm.DBH)
vario.DBH.resid <- variog(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)))
fit.DBH.resid <-variofit(vario.DBH.resid, ini.cov.pars=c(300, 200/-log(0.05)),
cov.model="exponential", minimisation.function="nls", weights="equal")
par(mfrow=c(1,2))
plot(vario.DBH, ylim=c(200,1200), main="DBH")
lines(fit.DBH)
abline(h=fit.DBH$nugget, col="blue")##nugget
abline(h=fit.DBH$cov.pars[1]+fit.DBH$nugget, col="green")##sill
abline(v=-log(0.05)*fit.DBH$cov.pars[2], col="red3")##effective range
plot(vario.DBH.resid, ylim=c(200,500), main="DBH residuals")
lines(fit.DBH.resid)
abline(h=fit.DBH.resid$nugget, col="blue")
abline(h=fit.DBH.resid$cov.pars[1]+fit.DBH.resid$nugget, col="green")
abline(v=-log(0.05)*fit.DBH.resid$cov.pars[2], col="red3")
###################################################
### code chunk number 11: anisoVario
###################################################
vario.DBH.resid <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)))
par(mfrow=c(1,1))
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
vario.DBH.resid.omni<-variofit(vario.DBH.resid$0, ini.cov.pars=c(300, 200/-log(0.05)),
cov.model="exponential", minimisation.function="nls", weights="equal")
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), legend=FALSE)
legend("bottomright", c("omnid", "0", "45", "90", "135", "directional"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red","black"), lty=1)
lines(vario.DBH.resid.omni)
vario.DBH.resid.omni<-variofit(vario.DBH.resid$0, ini.cov.pars=c(300, 200/-log(0.05)), cov.model="exponential", minimisation.function="nls", weights="equal")
vario.DBH.resid.omni<-variofit(vario.DBH.resid$45, ini.cov.pars=c(300, 200/-log(0.05)), cov.model="exponential", minimisation.function="nls", weights="equal")
vario.DBH.resid.omni<-variofit((vario.DBH.resid$45), ini.cov.pars=c(300, 200/-log(0.05)), cov.model="exponential", minimisation.function="nls", weights="equal")
vario.DBH.resid.omni<-variofit(vario.DBH.resid$"45", ini.cov.pars=c(300, 200/-log(0.05)), cov.model="exponential", minimisation.function="nls", weights="equal")
vario.DBH.resid.omni<-variofit(vario.DBH.resid$"45", ini.cov.pars=c(300, 200/-log(0.05)), cov.model="exponential", minimisation.function="nls", weights="equal")
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), legend=FALSE)
legend("bottomright", c("omnid", "0", "45", "90", "135", "directional"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red","black"), lty=1)
lines(vario.DBH.resid.omni)
vario.DBH.resid.newdirections <- variog4(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)), direction=c(pi/8, 3*pi/8, 5*pi/8, 7*pi/8))
vario.DBH.resid.22<-variofit(vario.DBH.resid.newdirections$"22.5", ini.cov.pars=c(300, 200/-log(0.05)), cov.model="exponential", minimisation.function="nls", weights="equal")
vario.DBH.resid.66<-variofit(vario.DBH.resid.newdirections$"67.5", ini.cov.pars=c(300, 200/-log(0.05)), cov.model="exponential", minimisation.function="nls", weights="equal")
vario.DBH.resid.112<-variofit(vario.DBH.resid.newdirections$"112.5", ini.cov.pars=c(300, 200/-log(0.05)), cov.model="exponential", minimisation.function="nls", weights="equal")
vario.DBH.resid.157<-variofit(vario.DBH.resid.newdirections$"157.5", ini.cov.pars=c(300, 200/-log(0.05)), cov.model="exponential", minimisation.function="nls", weights="equal")
vario.DBH.resid.45<-variofit(vario.DBH.resid$"45", ini.cov.pars=c(300, 200/-log(0.05)), cov.model="exponential", minimisation.function="nls", weights="equal")
plot(vario.DBH.resid, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), legend=FALSE)
legend("bottomright", c("omnid", "0", "45", "90", "135", "45 degree variogram"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red","black"), lty=1)
lines(vario.DBH.resid.45)
plot(vario.DBH.resid.newdirections, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
lines(vario.DBH.resid.22)
lines(vario.DBH.resid.66)
lines(vario.DBH.resid.112)
lines(vario.DBH.resid.157)
legend("bottomright", c("omnid", "22.5", "67.5", "112.5", "177.5"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
plot(vario.DBH.resid.newdirections, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","black"), legend = FALSE)
lines(vario.DBH.resid.22, col="blue")
lines(vario.DBH.resid.66, col="green")
lines(vario.DBH.resid.112, col="violet")
lines(vario.DBH.resid.157, col="red")
legend("bottomright", c("omnid", "22.5", "67.5", "112.5", "177.5"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
plot(vario.DBH.resid.newdirections, omni=TRUE, main="DBH residuals", lty=1, col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), legend = FALSE)
lines(vario.DBH.resid.22, col="blue")
lines(vario.DBH.resid.66, col="green")
lines(vario.DBH.resid.112, col="violet")
lines(vario.DBH.resid.157, col="red")
legend("bottomright", c("omnid", "22.5", "67.5", "112.5", "177.5"), col=c("darkorange", "darkblue", "darkgreen","darkviolet","red"), lty=1)
ggmap("Ben Lomond")
library(ggmap)
ggmap("Ben Lomond")
ggmap(get_map("Ben Lomond"))
map <- get_map("Ben Lomond")
ggmap(map) + geom_line(data=data.frame(c(1,2,3), c(1,2,3)))
ggmap(map)
lat = c(122, 122.2)
lon = c(37, 37.2)
df = data.frame(lat, lon)
ggmap(map) + geom_point(sata=df)
ggmap(map) + geom_point(sata=df, pch="*")
ggmap(map) + geom_point(data=df, pch="*")
df
ggmap(map) + geom_point(data=df, aes(x=lat, y=lon))
ggmap(map) + geom_point(data=df, aes(x=lat, y=lon), color="red")
ggmap(map) + geom_point(data=df, aes(x=Latitude, y=Longitude), color="red")
redwood.gbif <- gbif("Sequoia", "sempervirens", geo=T)
library(maptools)
library(sp)
redwood.gbif <- gbif("Sequoia", "sempervirens", geo=T)
library(dismo)
redwood.gbif <- gbif("Sequoia", "sempervirens", geo=T)
redwood.gbif
redwood1<-subset(redwood.gbif, redwood.gbif$lat != "NA",)
redwood1<-subset(redwood1, redwood1$lon != "NA",)
ggmap(map) + geom_point(data=redwood1, aes(x=lat, y=lon))
redwood1$lat
redwood1$lon
ggmap(map) + geom_point(data=redwood1, aes(x=lat, y=lon))
ggplot() + geom_point(data=redwood1, aes(x=lat, y=lon))
ggplot() + geom_point(data=redwood1, aes(x=lon, y=lat))
ggmap(map) + geom_point(data=redwood1, aes(x=lon, y=lat))
ggmap(map) + geom_density(data=redwood1, aes(x=lon, y=lat))
ggmap(map) + geom_density2d(data=redwood1, aes(x=lon, y=lat))
ggmap(map) + geom_density2d(data=redwood1, aes(x=lon, y=lat), geom="polygon")
ggmap(map) + stat_density2d(data=redwood1, aes(x=lon, y=lat))
ggmap(map) + stat_density2d(data=redwood1, aes(x=lon, y=lat), geom="polygon")
ggmap(map) + stat_density(data=redwood1, aes(x=lon, y=lat), geom="polygon")
ggmap(map) + stat_density(data=redwood1, aes(x=lon, y=lat))
ggmap(map) + stat_density2d(data=redwood1, aes(x=lon, y=lat, fill = ..level.., alpha = ..level..), geom="polygon")
ggmap(map) + stat_density2d(data=redwood1, aes(x=lon, y=lat, fill = ..level..), alpha=.5, geom="polygon")
ggmap(map) + stat_density2d(data=redwood1, aes(x=lon, y=lat, fill = ..level..), alpha=.2, geom="polygon")
redwood1 <- subset(redwood1, redwood1$lat > 36.7)
redwood1 <- subset(redwood1, redwood1$lat < 37.5)
redwood1 <- subset(redwood1, redwood1$lon > 122.3)
redwood1<-subset(redwood.gbif, redwood.gbif$lat != "NA",)
redwood1<-subset(redwood1, redwood1$lon != "NA",)
redwood1 <- subset(redwood1, redwood1$lat > 36.7)
redwood1 <- subset(redwood1, redwood1$lat < 37.5)
redwood1 <- subset(redwood1, redwood1$lon > -122.3)
redwood1 <- subset(redwood1, redwood1$lon < -121.7)
ggmap(map) + stat_density2d(data=redwood1, aes(x=lon, y=lat, fill = ..level..), alpha=.2, geom="polygon")
get_map("Ben Lomond", maptype = "background")
map2 ,_ get_map("Ben Lomond", maptype = "terrain")
map2 <- get_map("Ben Lomond", maptype = "terrain")
ggmap(map2)
map2 <- get_map("Ben Lomond", maptype = "satellite")
ggmap(map2)
map2 <- get_map("Ben Lomond", maptype = "hybrid")
ggmap(map2)
map2 <- get_map("Ben Lomond", maptype = "satellite")
map2 <- get_map("Ben Lomond", maptype = "satellite")
ggmap(map2) + stat_density2d(data=redwood1, aes(x=lon, y=lat, fill = ..level..), alpha=.2, geom="polygon")
ggmap(map2) + stat_density2d(data=redwood1, aes(x=lon, y=lat, fill = ..level..), alpha=.2, geom="polygon", color="red")
ggmap(map2) + stat_density2d(data=redwood1, aes(x=lon, y=lat, fill = ..level..), alpha=.2, geom="polygon", fill="red")
ggmap(map2) + stat_density2d(data=redwood1, aes(x=lon, y=lat, fill = ..level..), alpha=.2, geom="polygon", fill="yellow")
ggplot(data=Orange) + geom_line(aes(x=age, y=circumference, color=Tree))
multiplot(p1, p2, p3, p4, p5, p6, p7)
library(ggplot2)
multiplot(p1, p2, p3, p4, p5, p6, p7)
ggmap(map2) + stat_density2d(data=redwood1, aes(x=lon, y=lat, fill = ..level..), alpha=.2, geom="polygon", fill="yellow")
ggmap(map2) + stat_density2d(data=redwood1, aes(x=lon, y=lat, fill = ..level..))
ggmap(map2) + stat_density2d(data=redwood1, aes(x=lon, y=lat, fill = ..level..), fill="yellow")
ggmap(map2) + stat_density2d(data=redwood1, aes(x=lon, y=lat, fill = ..level..), color="yellow")
ggmap(map2) + stat_density2d(data=redwood1, aes(x=lon, y=lat, color = ..level..))
ggmap(map2) + stat_density2d(data=redwood1, aes(x=lon, y=lat))
ggmap(map2) + stat_density2d(data=redwood1, aes(x=lon, y=lat), color="yellow")
ggmap(map2) + stat_density2d(data=redwood1, aes(x=lon, y=lat), color="yellow") + geom_points(data=redwood1, aes(x=lon, y=lat), color="yellow")
ggmap(map2) + stat_density2d(data=redwood1, aes(x=lon, y=lat), color="yellow") + geom_point(data=redwood1, aes(x=lon, y=lat), color="yellow")
clear()
libraries
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install_github("slidify/ramnathv")
install_github("ramnathv/slidify")
install_github("ramnathv/slidifyLibraries")
library(slidify)
author("example_presentation")
slidift("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(slidify)
author("slidify-lesson")
require(devtools)
slidify("index.Rmd")
install_github("slidifyLibraries", "ramnathv", "dev")
install_github("slidify", "ramnathv", "dev")
install_github("ramnathv/slidify", "dev") #Slidify isn't on CRAN, the normal R package manager, so we have to get it directly from Github. Sometimes this doesn't go as smoothly on Windows, but don't worry, the internet can help!
install_github("ramnathv/slidifyLibraries", "dev")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
